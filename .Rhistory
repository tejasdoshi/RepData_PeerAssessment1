library("datasets")
data(iris)
?iris
iris
iris$Sepal.Length
mean(iris$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(-1.5)
mtcars
mtd = tapply(mtcars$mpg, mtcars$cyl, mean)
mtd$4
mtd
mtd[4]
tapply(mtcars$mpg, mtcars$cyl=4, mean)
mtcars$mpg
sapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
header(mtcars)
mtd = tapply(mtcars$mpg, mtcars$cyl, mean)
header(mtd)
?mtd
mtd
mtd[1]
mtd[1]-mtd[3]
abs(mtd[1]-mtd[3])
debug(ls)
ls
ls()
iris
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
ds = as.numeric(NULL)
dn = as.numeric(NULL)
dc = as.numeric(NULL)
filenames <- list.files(directory, pattern="*.csv")
for(f in filenames) {
df = read.csv(paste(directory,"/",f, sep=""))
if(min(as.vector(apply(df, 2, function(x) length(which(!is.na(x)))))) > threshold) {
dc = append(dc, cor(df[,"sulfate"], df[,"nitrate"], use="pairwise.complete.obs"))
}
}
dc
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
}
q
exit()
exit
irs
iris
subset(iris, iris$Species == "virginica")
ird = subset(iris, iris$Species == "virginica")
stop(ls)
source('~/Projects/dsWS/rWD/complete.r')
stop
stop()
iris
ird
mean(ird$Sepal.Length)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
mtd = with(mtcars, tapply(hp, cyl, mean))
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
{
{
{
{
{
{
{
{
{
{
{
{
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
all.names <- .Internal(ls(envir, all.names))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
mtd
datasets(mtcars)
library(datasets)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
mtd = with(mtcars, tapply(hp, cyl, mean))
mtd
abs(mtd[1] - mtd[3])
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
cacheSolve(matrix(1:9, 3, 3))
cacheSolve(makeCacheMatrix(matrix(1:9, 3, 3)))
?solve
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(matrix(1:9, 3, 3)))
det(matrix(1:9, 3, 3))
det(matrix(1:12, 3, 4))
det(matrix(1:16, 4, 4))
det(matrix(3:19, 4, 4))
det(matrix(3:20, 4, 4))
det(matrix(3:18, 4, 4))
cacheSolve(makeCacheMatrix(matrix(3:20, 4, 4)))
cacheSolve(makeCacheMatrix(matrix(3:18, 4, 4)))
cacheSolve(makeCacheMatrix(matrix(3, 4, 4)))
cacheSolve(makeCacheMatrix(matrix(numeric(1,3,5,7,9,11,2,4,6), 3, 3)))
cacheSolve(makeCacheMatrix(matrix(numeric(1,3,5,7,9,11,2,4,6), 3, 3)))
det(matrix(numeric(1,3,5,7,9,11,2,4,6), 3, 3))
det(matrix(1,3,5,7,9,11,2,4,6, 3, 3))
matrix
det(matrix(data = (1,3,5,7,9,11,2,4,6), 3, 3))
det(matrix(data = c(1,3,5,7,9,11,2,4,6), 3, 3))
det(matrix(data = numeric(1,3,5,7,9,11,2,4,6), 3, 3))
det(matrix(data = c(1,3,5,7,9,11,2,4,6), 3, 3))
cacheSolve(makeCacheMatrix(matrix(c(1,3,5,7,9,11,2,4,6), 3, 3)))
cacheSolve(makeCacheMatrix(matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)))
cacheSolve(makeCacheMatrix(matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)))
m1 = makeCacheMatrix(matrix(c(1,0,5,2,1,6,3,4,0), 3, 3))
cacheSolve(m1)
cacheSolve(m1)
m2 = makeCacheMatrix(matrix(c(1,3,5,2,1,6,3,4,0), 3, 3))
det(m2)
m3 = makeCacheMatrix(matrix(c(1,3,5,2,1,6,3,6,0), 3, 3))
cacheSolve(m2)
cacheSolve(m1)
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m1)
cacheSolve(m2)
source('~/Projects/dsWS/ProgrammingAssignment2/cachematrix.R')
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
library(ggplot2)
library("ggplot2")
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
setwd("~/Projects/dsWS/rWD/RepData_PeerAssessment1")
---
---
